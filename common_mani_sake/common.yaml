tasks:

  t-ch:
    desc: Remove unused directories in home and create some defaults
    tags: [global]
    cmd: |
      cd ~
      rm Bookshelf Desktop Documents Pictures Public Templates Music Downloads Videos -rf
      mkdir -p backups odoo14-dockers tools odoo140-tst-dockers odoo140-prd-dockers

  t-uu:
    desc: Update and upgrade server
    tags: [global]
    cmd: |
      sudo apt-get update -y
      sudo apt-get upgrade -y

  t-gb:
    desc: Clean garbage server
    tags: [global]
    cmd: |
      sudo apt-get autoremove -y
      sudo apt-get autoclean -y

  t-fs:
    desc: Total size files in specific directories
    tags: [global]
    env:
      p: '.'
      e: ''
      E: ''
    cmd: |
      exclude=""
      if [ "${E}" != "" ]; then
        rep="-E ${E}"        
        oldIFS=$IFS;
        IFS=","
        for item in $rep;
        do
          exclude+=" -E '${item}'"
        done;
        IFS=$oldIFS        
      fi
      path=""
      if [ "${p}" != "" ]; then
        path="-p ${p}"
      fi
      extension=""
      if [ "${e}" != "" ]; then
        extension="-e ${e}"
      fi
      fd -t f ${path} ${extension} ${exclude} -X du -ch {} | grep total$

  t-rm:
    desc: "Remove files in specific directories:\n
           params:  \n
             p= path eg ./**/i18n/* or empty (assumed current directory)\n
             e= extension e.g.  txt or empty (assumed all files)\n
             E= exclude files e.g. E=test.txt,test  (separate by comma)   or empty "
    tags: [global]
    env:
      p: '.'
      e: ''
      E: ''
    cmd: |
      exclude=""
      if [ "${E}" != "" ]; then
        rep="-E ${E}"        
        oldIFS=$IFS;
        IFS=","
        for item in $rep;
        do
          exclude+=" -E '${item}'"
        done;
        IFS=$oldIFS        
      fi
      path=""
      if [ "${p}" != "" ]; then
        path="-p ${p}"
      fi
      extension=""
      if [ "${e}" != "" ]; then
        extension="-e ${e}"
      fi
      # fd -t f ${path} ${extension} ${exclude} -tf -X rm
      fd -t f ${path} ${extension} ${exclude}
      # fd -t f ${path} ${extension} ${exclude} -X du -ch {} | grep total$
  # secure-pi:
  #   name: Secure PI
  #   desc: secure pi, block wifi, bluetooth, etc.
  #   cmd: |
  #     sudo rfkill block wifi
  #     sudo rfkill block bluetooth

  # set-default-editor:
  #   name: Set default editor
  #   desc: set default editor
  #   cmd: |
  #     sudo update-alternatives --install /usr/bin/editor editor /usr/bin/vim 1
  #     sudo update-alternatives --set editor /usr/bin/vim

  t-intf:
    desc: increase inotify watches, useful for syncthing
    cmd: echo "fs.inotify.max_user_watches=204800" | sudo tee -a /etc/sysctl.conf

  d-swap:
    desc: Disable swap
    cmd: sudo systemctl disable dphys-swapfile.service

  # sudo sed -i -r 's/raspberrypi/$HOSTNAME/' /etc/hosts
  s-hostname:
    desc: sets the hostname
    cmd: |
      sudo hostnamectl set-hostname $HOSTNAME

  print-host:
    desc: print host
    spec: info
    target: all
    cmd: echo $S_HOST

  print-hostname:
    desc: print hostname
    spec: info
    target: all
    cmd: hostname

  print-os:
    desc: print OS
    spec: info
    target: all
    cmd: |
      os=$(lsb_release -si)
      release=$(lsb_release -sr)
      echo "$os $release"

  # print-pi-version:
  #   name: Pi
  #   desc: print pi version
  #   spec: info
  #   target: all
  #   cmd: cat /proc/device-tree/model
  print-kernel:
    desc: Print kernel version
    spec: info
    target: all
    shell: bash
    cmd: uname -r | awk -v FS='-' "{print $1}"

  print-mem:
    desc: print memory stats
    spec: info
    target: all
    cmd: |
      mem_tot=$(awk '$1 == "MemTotal:" { print $2 / 1024 / 1024 }' /proc/meminfo)
      mem_tot=$(printf "%.1f" $mem_tot)

      mem_free=$(awk '$1 == "MemAvailable:" { print $2 / 1024 / 1024 }' /proc/meminfo)
      mem_free=$(printf "%.1f" $mem_free)
      mem_used=$(echo "$mem_tot-$mem_free" | bc)

      echo "$mem_used / $mem_tot Gb"

  print-cpu:
    desc: print memory stats
    spec: info
    target: all
    cmd: |
      num_cores=$(nproc --all)
      cpu_load=$(mpstat 1 2 | awk 'END{print 100-$NF"%"}')
      echo "$cpu_load, ($num_cores cores)"

  print-disk:
    desc: print disk usage
    spec: info
    target: all
    cmd: |
      disk=$(/usr/bin/df -BG 2>/dev/null | tail -n +2 | sort -h -k2,2 -r | awk -F " " '{print $1, $2, $3}' | head -n 1)

      tot_disk=$(echo $disk | awk '{print $2}')
      used_disk=$(echo $disk | awk '{print $3}')

      echo "$used_disk / $tot_disk"

  print-uptime:
    desc: print uptime
    spec: info
    target: all
    cmd: uptime | grep -E -o "[0-9]* (day|days)"

  info:
    desc: Print system info
    spec: info
    target: all
    tasks:
      - task: print-os
      - task: print-kernel
      - task: print-disk
      - task: print-mem
      - task: print-cpu
      - task: print-uptime

  # sake run get-backups --server <server>
  # sake run upload --server <server> SRC=/some/file DEST=/some/file
  upload:
    desc: upload file or directory
    env:
      src: ""
    local: true
    cmd: |
      # echo ${src}
      # echo $S_PORT
      full_dest="$dest/$dest_file"
      echo "$src $S_USER@$S_HOST:$full_dest"
      rsync -r -v -a -u -e "ssh -p $S_PORT" $src $S_USER@$S_HOST:$full_dest

  download:
    desc: download file or directory
    env:
      SRC: ""
      DEST: ""
    local: true # Command should be run from local host
    cmd: rsync --recursive --verbose --archive --update $S_HOST:$SRC $DEST

  # sake run get-backups --server <server>
  # sake run download --server <server> SRC=/some/file DEST=/some/file
  get-backups:
    desc: get backups from remote server
    env:
      SRC_FILE: backup.db
      SRC: "/opt/odoo/backups/${SRC_FILE}"
      DEST_FILE: backup.db
      DEST: "/opt/odoo/backups/${DEST_FILE}"
    task: download

  ssh-cmd:
    desc: run command and ssh to server after
    # attach: true # Attach will SSH to server una vez se ejecuta el comando se accede al server
    cmd: ls -alh

  ssh-tunnel:
    desc: create ssh tunnel
    tty: true # Replacing the current process is necessary if you want to be able to kill the tunnel (in order to respond SIGINT signals)
    env:
      LOCAL:
      REMOTE:
      PORT: 22
    cmd: ssh -p $PORT $S_USER@$S_HOST -N -L $LOCAL:localhost:$REMOTE

  # El parámetro «-L» se utiliza para definir el puerto a reenviar al host remoto.
  # Si añadimos el parámetro «-N«, indicamos que no ejecute el comando de forma remota.
  # De esta manera no obtendremos ninguna consola.
  # Si añadimos el parámetro «-f«, indicamos a SSH que se ejecute en segundo plano.
  # ssh -N -f root@servtest -L 8081:servtest:8080
  # Ya tendríamos que acceder al servidor TOMCAT remoto, por el puerto 8081 local.
  # sake run script --server <server> FILE=./script.sh
  script:
    desc: run local script on remote server
    env:
      FILE: ""
    local: true
    cmd: |
      # Get filename
      file=$(basename $FILE)

      # Create temp file
      temp_file="$(mktemp /tmp/$FILE.XXXXXXXXX -u)"

      # Upload script
      rsync --compress --recursive --archive --update $FILE $S_HOST:$temp_file

      # Run script
      ssh $S_USER@$S_HOST "$temp_file"

      # Remove script
      ssh $S_USER@$S_HOST "rm $temp_file"

  a-fd:
    desc: Install fd program
    theme: discover_projects
    spec: discover_projects
    tags: [project]
    target:
      tags: [node]
      cwd: true
    cmd: |
      if [ "$(uname -s)" = "Darwin" ] && [ "$(uname -m)" = "x86_64" ]; then
          target="darwin_amd64"
      elif [ "$(uname -s)" = "Linux" ] && [ "$(uname -m)" = "x86_64" ]; then
          target="linux_amd64"
      elif [ "$(uname -s)" = "Linux" ] && ( uname -m | grep -q -e '^arm' -e '^aarch' ); then
          target="linux_arm64"
      else
          echo "Unsupported OS or architecture"
          exit 1
      fi
      if [ "${target}" = "darwin_amd64" ]; then
        brew install fd
      fi
      if [ "${target}" = "linux_amd64" ]; then
        apt install fd-find
      fi
      echo "Successfully installed on target: $target"

  simple-1:
    # The name that will be displayed when executing or listing tasks. Defaults to task ID [optional]
    name: Simple

    # Script to run
    cmd: |
      echo "hello world"
    desc: simple command 1